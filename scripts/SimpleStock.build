<?xml version="1.0"?>
<project name="SimpleStock" default="integrate" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
  <description>
    SimpleStock build targets.
  </description>

  <property name="project.name" value="SimpleStock"/>
  
  <property name="nant.settings.currentframework" value="net-4.0" />
  
  <property name="base_dir" value="${project::get-base-directory()}\.." readonly="true" />
  <property name="binaries" value="${base_dir}\binaries" readonly="true" />
  <property name="sources" value="${base_dir}\source" readonly="true" />
  <property name="publish" value="${base_dir}\publish" readonly="true" />
  <property name="tools_dir" value="${base_dir}\tools" />
  <property name="git" value="${tools_dir}\git\git.exe" />
  <property name="nuget.console" value="${tools_dir}\NuGet\nuget.exe" />
  
  <property name="build.number" value="0" />

  <property name="build_config" value="Release" />
  <property name="build_succeeded" value="false" />
  <property name="parallelBuild" value="true" overwrite="false" readonly="false" />
  
  <sysinfo failonerror="false" />

  <!--
  =========================================================
  Main targets
  ========================================================= 
    -->
  <target name="integrate" depends="clean, build_release" 
          description="Build and exectute unit tests for developers before commit their changes.">
  </target>

  <!--
  =========================================================
  Build targets
  ========================================================= 
    -->
  <target name="build" description="Builds a debug version">
    <property name="build_config" value="Debug" />
    <call target="build_SimpleStock" />
  </target>

  <target name="build_release" description="Builds a release version">
    <call target="build_SimpleStock" />
  </target>	
  
  <!--
  =========================================================
  internal targets
  ========================================================= 
   -->

  <target name="clean" description="Cleans all files">
    <echo message="Starting cleaning of solutions" />
    <delete failonerror="false">
      <fileset basedir="${publish}">
        <include name="**/*" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset basedir="${binaries}">
        <include name="**/*" />
      </fileset>
    </delete>
    <foreach item="Folder" property="foldername">
      <in>
        <items basedir="${sources}">					
          <include name="**/bin" />
        </items>
      </in>
      <do>
        <delete dir="${foldername}" failonerror="false" />
      </do>
    </foreach>
    <echo message="Completion cleaning of solutions" />
  </target>	
  
  <target name="clean-packages" description="Cleans all packages">
    <echo message="Starting cleaning of packages" />
  <foreach item="File" property="file">
      <in>
        <items basedir="${sources}/packages">					
          <include name="**/*" />
          <exclude name=".gitignore" />
          <exclude name="repositories.config" />
        </items>
      </in>
      <do>
        <delete file="${file}" failonerror="false" />
      </do>
    </foreach>
    <foreach item="Folder" property="foldername">
      <in>
        <items basedir="${sources}/packages">					
          <include name="**/*" />
        </items>
      </in>
      <do>
        <delete dir="${foldername}" failonerror="false" />
      </do>
    </foreach>
    <echo message="Completion cleaning of packages" />
  </target>	
  
  <target name="build_SimpleStock" description="Builds all projects of the SimpleStock solution">	
    <echo message="Starting compilation of solutions" />
    <tstamp />
    <property name="maxcpucount" value="" />
    <if test="${environment::variable-exists('MAX_CPU_COUNT')}">
      <property name="maxcpucount" value="/maxcpucount:${environment::get-variable('MAX_CPU_COUNT')}" />
    </if>
    <echo message="Max CPU count is ${maxcpucount}." />
    <property name="msBuild.exe" value="${framework::get-framework-directory('net-4.0')}/msbuild.exe" />
    <property name="standardargs" value="/p:Configuration=${build_config} /p:Platform=&quot;Any CPU&quot; /verbosity:minimal /fileLogger /fileLoggerParameters:LogFile=${base_dir}/msbuild.log /nr:false" />
	<property name="standardargs" value="${standardargs} /p:RunCodeAnalysis=&quot;false&quot;" />
    <choose>
      <when test="${parallelBuild}">
        <exec program="${msBuild.exe}" failonerror="true">
          <arg value="${sources}/${project.name}.sln"/>
          <arg line="${standardargs} /m ${maxcpucount}"/>
        </exec>		
      </when>
      <otherwise>
        <exec program="${msBuild.exe}" failonerror="true">
          <arg value="${sources}/${project.name}.sln"/>
          <arg line="${standardargs}"/>
        </exec>	
      </otherwise>
    </choose>
    <echo message="Time: ${tstamp.time}" />
    <property name="build_succeeded" value="true" />
    <echo message="Completed compilation of solutions" />
  </target>

  <target name="copy_bin" description="Copies the builded output to the top bin directory">
    <echo message="copying files to ${binaries}\${build_config}\" />

    <foreach item="Folder" property="folder">
      <in>
        <items>
          <exclude name="${sources}\SimpleStock.Test" />
          <exclude name="${sources}\SimpleStock.*.Test" />
          <exclude name="${sources}\SimpleStock.*.Specification" />
          <exclude name="${sources}\SimpleStock.*.Sample" />
          <exclude name="${sources}\SimpleStock.*.Performance" />
          <exclude name="${sources}\.*" />
          <include name="${sources}\SimpleStock*" />
        </items>
      </in>
      <do>
        <property name="project" value="${path::get-file-name(folder)}" />

        <copy overwrite="false" todir="${binaries}\${build_config}\${project}" flatten="false">
          <fileset basedir="${folder}/bin/${build_config}">
            <include name="**/${project}.dll" />
            <include name="**/${project}.xml" />
            <include name="**/${project}.pdb" />
          </fileset>
        </copy>
        
        <!-- copy additionally needed files -->
        <property name="dependenciesFile" value="${folder}\Dependencies.txt" />
        <if test="${file::exists(dependenciesFile)}">
          <echo message="copying additional files for ${project}" />
          
          <foreach item="Line" in="${dependenciesFile}" property="dependency">
            <do>
              <copy overwrite="false" todir="${binaries}\${build_config}\${project}" flatten="false">
                <fileset basedir="${folder}/bin/${build_config}">
                  <include name="**/${dependency}" />
                </fileset>
              </copy>
            </do>
          </foreach>
        </if>
        
      </do>
    </foreach>
  </target>

  <target name="package">
    <zip zipfile="${publish}\${project.name}.zip">
      <fileset basedir="${binaries}\${build_config}">
        <include name="**/*" />
      </fileset>
    </zip>
  </target>
  
  <target name="nuget" description="Copies the nuget output to the top bin directory" >
   
    <property name="nuget.basedir" value="${publish}\NuGet" />
    <mkdir dir="${nuget.basedir}" />
    
    <foreach item="File" property="nuspec">
      <in>
        <items>
          <include name="${sources}/**/*.nuspec" />
        </items>
      </in>
      <do>
        
        <property name="nugetFolder" value="${binaries}\${build_config}\${path::get-file-name-without-extension(nuspec)}" />
        <property name="nugetFile" value="${nugetFolder}\${path::get-file-name(nuspec)}" />
        <property name="sourceFolder" value="${path::get-file-name-without-extension(nugetFile)}" />
        
        <loadfile file="${nuspec}" property="content" />

        <foreach item="Line" in="${base_dir}\scripts\nuget.symbols.txt" property="sourcefiles">
          <do>
            <property name="sourceProjectFiles" value="${string::replace(sourcefiles, '%sourcefolder%', sourceFolder)}" />
            <property name="content" value="${string::replace(content, '&lt;/package>', sourceProjectFiles + '&lt;/package>')}" />
          </do>
        </foreach>
        
        <foreach item="Line" in="${publish}\versions.txt" delim="," property="projectname,projectversion,nextversion,fileversion">
          <do>
            <property name="content" value="${string::replace(content, '%' + projectname + '%', '[' + projectversion + ',' + nextversion + ')')}" />
            <property name="content" value="${string::replace(content, '%' + projectname + 'FileVersion%', string::substring(fileversion, 0, string::get-length(fileversion) - 2) + pre.version)}" />
          </do>
        </foreach>
        
        <echo message="${content}" file="${nugetFile}" />

        <copy overwrite="false" todir="${nugetFolder}">
          <fileset basedir="${base_dir}\source\">
            <include name="License.txt" />
          </fileset>
        </copy>

        <exec program="${nuget.console}" commandline="pack ${nugetFile} -symbols" />
    
        <move todir="${publish}\NuGet\">
          <fileset basedir="${base_dir}\Scripts\">
            <include name="*.nupkg" />
          </fileset>
        </move>
        
      </do>
    </foreach>
  </target>
  
</project>